import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    JobQueue,
)
from datetime import datetime, timedelta
import pytz
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ credentials
creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("GOOGLE_CREDENTIALS environment variable not set")

creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(creds_json), scope)
client = gspread.authorize(creds)
sheets = {
    "B-11": client.open("GSOM-PLANNER").worksheet("B-11"),
    "B-12": client.open("GSOM-PLANNER").worksheet("B-12"),
    "Users": client.open("GSOM-PLANNER").worksheet("Users")
}

ALLOWED_USERS = {
    1042880639: "B-11",  # Mariia   1062616885   1042880639
    1062616885: "B-12"    # Poka chto Ya    1062616885   797969195
}

# –°—Ç–µ–π—Ç—ã
EDITING_TASK = 1
WAITING_FOR_INPUT = 2
WAITING_FOR_FEEDBACK = 3

# –Ø–∑—ã–∫–∏
LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English"
}

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–æ—Å–∫–≤—ã
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REMINDER_TIME = "09:00"  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ 09:00 –ø–æ –ú–°–ö
REMINDER_DAYS_BEFORE = list(range(10, -1, -1))  # –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 10,9,8,...,0 –¥–Ω–µ–π
REMINDER_CHECK_INTERVAL = 60  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

def convert_to_datetime(time_str, date_str):
    current_year = datetime.now().year
    try:
        if time_str.lower() in ["by schedule", "–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"]:
            time_str = "23:59"
            
        time_parts = time_str.split('-')
        start_time = time_parts[0]
        date_with_year = f"{current_year}-{date_str}"
        dt = datetime.strptime(f"{start_time}-{date_with_year}", '%H:%M-%Y-%d.%m')
        return MOSCOW_TZ.localize(dt)
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return None

def main_menu_keyboard(user_lang="ru"):
    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è" if user_lang == "ru" else "üìã View tasks", callback_data="get_data")],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" if user_lang == "ru" else "‚ûï Add task", callback_data="add_task"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ" if user_lang == "ru" else "üóëÔ∏è Delete task", callback_data="delete_task")
        ],
        [InlineKeyboardButton("üë• –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã" if user_lang == "ru" else "üë• Select group", callback_data="select_group")],
        [InlineKeyboardButton("‚öôÔ∏è –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª" if user_lang == "ru" else "‚öôÔ∏è Features", callback_data="help")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to menu", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    try:
        users = sheets["Users"].get_all_values()
        user_exists = any(str(user_id) == row[0] for row in users[1:] if len(row) > 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        user_exists = False
    
    if not user_exists:
        try:
            sheets["Users"].append_row([user_id, "", True, "ru", ""])  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    user_lang = get_user_language(user_id)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *GSOMPASS –±–æ—Ç*.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:" if user_lang == "ru" else "üëã Hi! Welcome to *GSOMPASS bot*.\n\nChoose an action below:",
        reply_markup=main_menu_keyboard(user_lang),
        parse_mode='Markdown'
    )

def get_user_language(user_id):
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((row for row in users if len(row) > 0 and str(user_id) == row[0]), None)
        if user_row and len(user_row) > 3:
            return user_row[3] if user_row[3] in LANGUAGES else "ru"
    except Exception as e:
        logger.error(f"Error getting user language: {e}")
    return "ru"

def get_user_reminders_enabled(user_id):
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((row for row in users if len(row) > 0 and str(user_id) == row[0]), None)
        if user_row and len(user_row) > 2:
            return user_row[2].lower() == 'true'
    except Exception as e:
        logger.error(f"Error getting user reminders status: {e}")
    return True

async def callback_back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = get_user_language(query.from_user.id)
    
    await query.edit_message_text(
        "üëã –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" if user_lang == "ru" else "üëã You're back to the main menu. Choose an action:",
        reply_markup=main_menu_keyboard(user_lang)
    )

async def callback_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" if user_lang == "ru" else "üîî Reminder settings", callback_data="reminder_settings")],
        [InlineKeyboardButton("üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" if user_lang == "ru" else "üåê Change language", callback_data="language_settings")],
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫" if user_lang == "ru" else "üìù Leave feedback", callback_data="leave_feedback")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to menu", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(
        "üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n\n"
        "‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "‚Ä¢ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (–¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "‚Ä¢ üóìÔ∏è –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã\n"
        "‚Ä¢ üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö\n"
        "‚Ä¢ üë• –í—ã–±–æ—Ä/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\n"
        "‚Ä¢ üîí –î–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ —É –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" if user_lang == "ru" else 
        "üìå Bot features:\n\n"
        "‚Ä¢ üìã View tasks for your group\n"
        "‚Ä¢ ‚ûï Add task (for curators)\n"
        "‚Ä¢ üóëÔ∏è Delete task (for curators)\n"
        "‚Ä¢ üóìÔ∏è Data is taken from Google Sheets\n"
        "‚Ä¢ üîî Task reminders\n"
        "‚Ä¢ üë• Select/change group\n"
        "‚Ä¢ üìù Send feedback to developer\n"
        "‚Ä¢ üîí Only trusted users can make changes",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def callback_leave_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = get_user_language(query.from_user.id)
    
    await query.edit_message_text(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞:" if user_lang == "ru" else 
        "üìù Please write your feedback or suggestion for improving the bot:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å" if user_lang == "ru" else "‚Ü©Ô∏è Cancel", callback_data="cancel_feedback")]])
    )
    return WAITING_FOR_FEEDBACK

async def handle_feedback_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    feedback_text = update.message.text
    user_lang = get_user_language(user_id)
    
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((i for i, row in enumerate(users) if len(row) > 0 and str(user_id) == row[0]), None)
        
        if user_row is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ (—Å—Ç–æ–ª–±–µ—Ü E)
            sheets["Users"].update_cell(user_row + 1, 5, feedback_text)
            
            await update.message.reply_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è." if user_lang == "ru" else 
                "‚úÖ Thank you for your feedback! We'll take it into account.",
                reply_markup=main_menu_keyboard(user_lang))
        else:
            await update.message.reply_text(
                "‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." if user_lang == "ru" else 
                "‚õî Failed to save feedback. Please try again later.",
                reply_markup=main_menu_keyboard(user_lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–¥–±—ç–∫–∞: {e}")
        await update.message.reply_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞." if user_lang == "ru" else 
            "‚õî An error occurred while saving feedback.",
            reply_markup=main_menu_keyboard(user_lang))
    
    return ConversationHandler.END

async def cancel_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = get_user_language(query.from_user.id)
    
    await query.edit_message_text(
        "üö´ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞." if user_lang == "ru" else "üö´ Feedback submission canceled.",
        reply_markup=main_menu_keyboard(user_lang))
    return ConversationHandler.END

async def show_tasks_for_group(query, group, show_delete_buttons=False):
    sheet = sheets[group]
    try:
        all_values = sheet.get_all_values()
        data = all_values[1:] if len(all_values) > 1 else []
        
        user_lang = get_user_language(query.from_user.id)
        response = f"üìå –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n" if user_lang == "ru" else f"üìå Tasks for group {group}:\n"
        count = 0
        tasks = []

        for idx, row in enumerate(data, start=2):
            if len(row) >= 7 and row[6] == group:
                try:
                    deadline = convert_to_datetime(row[5], row[4])
                    if deadline:
                        tasks.append((deadline, row, idx))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
                    continue

        tasks.sort(key=lambda x: x[0])

        keyboard = []
        for deadline, row, row_idx in tasks:
            if deadline > datetime.now(MOSCOW_TZ):
                count += 1
                time_display = "By schedule" if row[5] in ["23:59", "By schedule", "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"] else row[5]
                response += (
                    f"\nüîπ *{row[0]}* ‚Äî {row[1]} "
                    f"({row[2]})\n"
                    f"üóì –î–∞—Ç–∞: {row[4]} | –í—Ä–µ–º—è: {time_display} | –ë–∞–ª–ª—ã: {row[3]}\n"
                    f"üìñ –¢–∏–ø: {row[7] if len(row) > 7 else 'N/A'} | –î–µ—Ç–∞–ª–∏: {row[8] if len(row) > 8 else 'N/A'}\n" if user_lang == "ru" else 
                    f"\nüîπ *{row[0]}* ‚Äî {row[1]} "
                    f"({row[2]})\n"
                    f"üóì Date: {row[4]} | Time: {time_display} | Points: {row[3]}\n"
                    f"üìñ Type: {row[7] if len(row) > 7 else 'N/A'} | Details: {row[8] if len(row) > 8 else 'N/A'}\n"
                )
                
                if show_delete_buttons:
                    keyboard.append([InlineKeyboardButton(
                        f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å: {row[0]} ({row[4]})" if user_lang == "ru" else f"üóëÔ∏è Delete: {row[0]} ({row[4]})",
                        callback_data=f"delete_{group}_{row_idx}"
                    )])

        if count == 0:
            response = "‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã." if user_lang == "ru" else "‚ÑπÔ∏è No tasks for your group yet."

        if show_delete_buttons:
            keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥" if user_lang == "ru" else "‚Ü©Ô∏è Back", callback_data="back_to_menu")])
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            reply_markup = main_menu_keyboard(user_lang)

        await query.edit_message_text(response, parse_mode='Markdown', reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π: {e}")
        user_lang = get_user_language(query.from_user.id)
        await query.edit_message_text(
            f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π: {str(e)}" if user_lang == "ru" else f"‚õî Error getting tasks: {str(e)}",
            reply_markup=main_menu_keyboard(user_lang))

async def callback_get_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    try:
        users = sheets["Users"].get_all_values()
        user_row = next((row for row in users if len(row) > 0 and str(user_id) == row[0]), None)
        group = user_row[1] if user_row and len(user_row) > 1 and user_row[1] in sheets else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        group = None

    if not group and user_id in ALLOWED_USERS:
        group = ALLOWED_USERS[user_id]
        try:
            if user_row:
                sheets["Users"].update_cell(users.index(user_row) + 1, 2, group)
            else:
                sheets["Users"].append_row([user_id, group, False, "ru", ""])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    if group:
        await show_tasks_for_group(query, group)
    else:
        await callback_select_group(update, context)

async def callback_select_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
    
    user_lang = get_user_language(query.from_user.id if query else update.effective_user.id)
    
    group_keyboard = [
        [InlineKeyboardButton("B-11", callback_data="set_group_B-11"),
         InlineKeyboardButton("B-12", callback_data="set_group_B-12")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to menu", callback_data="back_to_menu")]
    ]
    
    text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:" if user_lang == "ru" else "üë• Select your group:"
    if query:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(group_keyboard))
    else:
        await context.bot.send_message(
            update.effective_chat.id,
            text,
            reply_markup=InlineKeyboardMarkup(group_keyboard)
        )

async def set_user_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    group = query.data.replace("set_group_", "")
    
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((i for i, row in enumerate(users) if len(row) > 0 and str(user_id) == row[0]), None)
        
        if user_row is None:
            sheets["Users"].append_row([user_id, group, False, "ru", ""])
        else:
            sheets["Users"].update_cell(user_row + 1, 2, group)
        
        user_lang = get_user_language(user_id)
        await query.edit_message_text(
            f"‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {group}" if user_lang == "ru" else f"‚úÖ Your group is set: {group}",
            reply_markup=main_menu_keyboard(user_lang))
        
        if user_row is not None and len(users[user_row]) > 2 and users[user_row][2].lower() == 'true':
            await schedule_reminders_for_user(context.application.job_queue, user_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        user_lang = get_user_language(user_id)
        await query.edit_message_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥—Ä—É–ø–ø—ã." if user_lang == "ru" else "‚õî An error occurred while setting the group.",
            reply_markup=main_menu_keyboard(user_lang))

def generate_edit_task_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úçÔ∏è –ü—Ä–µ–¥–º–µ—Ç" if user_lang == "ru" else "‚úçÔ∏è Subject", callback_data="edit_subject"),
            InlineKeyboardButton("üìò –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è" if user_lang == "ru" else "üìò Task type", callback_data="edit_task_type")
        ],
        [
            InlineKeyboardButton("üíØ –ë–∞–ª–ª—ã" if user_lang == "ru" else "üíØ Points", callback_data="edit_max_points"),
            InlineKeyboardButton("üóìÔ∏è –î–∞—Ç–∞" if user_lang == "ru" else "üóìÔ∏è Date", callback_data="edit_date")
        ],
        [
            InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è" if user_lang == "ru" else "‚è∞ Time", callback_data="edit_time"),
            InlineKeyboardButton("üìç –§–æ—Ä–º–∞—Ç" if user_lang == "ru" else "üìç Format", callback_data="edit_format")
        ],
        [
            InlineKeyboardButton("üìñ Book Type" if user_lang == "ru" else "üìñ Book Type", callback_data="edit_book_type"),
            InlineKeyboardButton("üìù –î–µ—Ç–∞–ª–∏" if user_lang == "ru" else "üìù Details", callback_data="edit_details")
        ],
        [
            InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" if user_lang == "ru" else "‚úÖ Save", callback_data="save_task"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å" if user_lang == "ru" else "‚ùå Cancel", callback_data="cancel_task")
        ]
    ])

def generate_subject_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Maths", callback_data="Maths"),
         InlineKeyboardButton("Management", callback_data="Management")],
        [InlineKeyboardButton("DigTools", callback_data="DigTools"),
         InlineKeyboardButton("FinAcc", callback_data="FinAcc")],
        [InlineKeyboardButton("Microeconomics", callback_data="Microeconomics"),
         InlineKeyboardButton("–î—Ä—É–≥–æ–µ" if user_lang == "ru" else "Other", callback_data="other_subject")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_task_type_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Test", callback_data="Test"),
         InlineKeyboardButton("HW", callback_data="HW")],
        [InlineKeyboardButton("MidTerm", callback_data="MidTerm"),
         InlineKeyboardButton("FinalTest", callback_data="FinalTest")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ" if user_lang == "ru" else "Other", callback_data="other_task_type")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_points_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("5", callback_data="points_5"),
         InlineKeyboardButton("10", callback_data="points_10")],
        [InlineKeyboardButton("15", callback_data="points_15"),
         InlineKeyboardButton("20", callback_data="points_20")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ" if user_lang == "ru" else "Other", callback_data="other_max_points")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_time_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("10:00", callback_data="time_10:00"),
         InlineKeyboardButton("11:45", callback_data="time_11:45")],
        [InlineKeyboardButton("14:15", callback_data="time_14:15"),
         InlineKeyboardButton("16:00", callback_data="time_16:00")],
        [InlineKeyboardButton("17:45", callback_data="time_17:45"),
         InlineKeyboardButton("19:30", callback_data="time_19:30")],
        [InlineKeyboardButton("23:59", callback_data="time_23:59"),
         InlineKeyboardButton("By schedule" if user_lang == "en" else "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="time_schedule")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_date_buttons(user_lang="ru"):
    today = datetime.now(MOSCOW_TZ)
    buttons = []
    row_buttons = []
    
    for i in range(28):
        date = today + timedelta(days=i+1)
        date_str = date.strftime("%d.%m")
        day_name = date.strftime("%a")
        
        btn_text = f"{date_str} ({day_name})"
        row_buttons.append(InlineKeyboardButton(btn_text, callback_data=date_str))
        
        if len(row_buttons) == 4 or i == 27:
            buttons.append(row_buttons)
            row_buttons = []
    
    buttons.append([InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –¥–∞—Ç—É" if user_lang == "ru" else "‚úèÔ∏è Enter custom date", callback_data="custom_date")])
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")])
    
    return InlineKeyboardMarkup(buttons)

def generate_format_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Online", callback_data="Online"),
         InlineKeyboardButton("Offline - MD", callback_data="Offline - MD")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_book_type_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Open-book", callback_data="Open-book"),
         InlineKeyboardButton("Closed-book", callback_data="Closed-book")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

def generate_details_keyboard(user_lang="ru"):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("Calculators allowed", callback_data="details_Calculators allowed")],
        [InlineKeyboardButton("Notes allowed", callback_data="details_Notes allowed")],
        [InlineKeyboardButton("Books allowed", callback_data="details_Books allowed")],
        [InlineKeyboardButton("Phones allowed", callback_data="details_Phones allowed")],
        [InlineKeyboardButton("Other", callback_data="other_details")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to editing", callback_data="back_to_editing")]
    ])

async def format_task_message(context):
    task_data = context.user_data.get("task_data", {})
    user_lang = get_user_language(context._user_id) if hasattr(context, '_user_id') else "ru"
    
    message = "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n" if user_lang == "ru" else "üìù Editing task:\n\n"
    message += f"üîπ <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {task_data.get('subject', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ' if user_lang == 'ru' else 'not selected')}\n"
    message += f"üîπ <b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è:</b> {task_data.get('task_type', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ' if user_lang == 'ru' else 'not selected')}\n"
    message += f"üîπ <b>–ú–∞–∫—Å. –±–∞–ª–ª—ã:</b> {task_data.get('max_points', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ' if user_lang == 'ru' else 'not selected')}\n"
    message += f"üîπ <b>–î–∞—Ç–∞:</b> {task_data.get('date', '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞' if user_lang == 'ru' else 'not selected')}\n"
    
    time_display = task_data.get('time', '–Ω–µ –≤—ã–±—Ä–∞–Ω–æ' if user_lang == 'ru' else 'not selected')
    if time_display == "23:59":
        time_display = "By schedule" if user_lang == "en" else "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
    elif time_display == "time_schedule":
        time_display = "By schedule" if user_lang == "en" else "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"
    message += f"üîπ <b>–í—Ä–µ–º—è:</b> {time_display}\n"
    
    message += f"üîπ <b>–§–æ—Ä–º–∞—Ç:</b> {task_data.get('format', '–Ω–µ –≤—ã–±—Ä–∞–Ω' if user_lang == 'ru' else 'not selected')}\n"
    message += f"üîπ <b>Book Type:</b> {task_data.get('book_type', '–Ω–µ –≤—ã–±—Ä–∞–Ω' if user_lang == 'ru' else 'not selected')}\n"
    message += f"üîπ <b>–î–µ—Ç–∞–ª–∏:</b> {task_data.get('details', '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã' if user_lang == 'ru' else 'not selected')}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:" if user_lang == "ru" else "Select a parameter to change or save the task:"
    return message

async def callback_add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)

    if user_id not in ALLOWED_USERS:
        await query.edit_message_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π." if user_lang == "ru" else "‚õî You don't have access to add tasks.",
            reply_markup=main_menu_keyboard(user_lang))
        return ConversationHandler.END

    context.user_data["task_data"] = {
        "group": ALLOWED_USERS[user_id],
        "subject": "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ" if user_lang == "ru" else "not selected",
        "task_type": "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ" if user_lang == "ru" else "not selected",
        "max_points": "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ" if user_lang == "ru" else "not selected",
        "date": "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞" if user_lang == "ru" else "not selected",
        "time": "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ" if user_lang == "ru" else "not selected",
        "format": "–Ω–µ –≤—ã–±—Ä–∞–Ω" if user_lang == "ru" else "not selected",
        "book_type": "–Ω–µ –≤—ã–±—Ä–∞–Ω" if user_lang == "ru" else "not selected",
        "details": "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã" if user_lang == "ru" else "not selected"
    }

    message = await format_task_message(context)
    await query.edit_message_text(
        message,
        reply_markup=generate_edit_task_keyboard(user_lang),
        parse_mode='HTML'
    )
    return EDITING_TASK

async def edit_task_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = get_user_language(query.from_user.id)
    
    if query.data == "edit_subject":
        await query.edit_message_text(
            "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:" if user_lang == "ru" else "‚úçÔ∏è Select subject:",
            reply_markup=generate_subject_keyboard(user_lang)
        )
    elif query.data == "edit_task_type":
        await query.edit_message_text(
            "üìò –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:" if user_lang == "ru" else "üìò Select task type:",
            reply_markup=generate_task_type_keyboard(user_lang)
        )
    elif query.data == "edit_max_points":
        await query.edit_message_text(
            "üíØ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:" if user_lang == "ru" else "üíØ Select maximum points:",
            reply_markup=generate_points_keyboard(user_lang)
        )
    elif query.data == "edit_date":
        await query.edit_message_text(
            "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:" if user_lang == "ru" else "üóìÔ∏è Select date:",
            reply_markup=generate_date_buttons(user_lang)
        )
    elif query.data == "edit_time":
        await query.edit_message_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:" if user_lang == "ru" else "‚è∞ Select time:",
            reply_markup=generate_time_keyboard(user_lang)
        )
    elif query.data == "edit_format":
        await query.edit_message_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:" if user_lang == "ru" else "üìç Select format:",
            reply_markup=generate_format_keyboard(user_lang)
        )
    elif query.data == "edit_book_type":
        await query.edit_message_text(
            "üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è (open/closed book):" if user_lang == "ru" else "üìñ Select book type (open/closed book):",
            reply_markup=generate_book_type_keyboard(user_lang)
        )
    elif query.data == "edit_details":
        await query.edit_message_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:" if user_lang == "ru" else "üìù Select allowed materials:",
            reply_markup=generate_details_keyboard(user_lang)
        )
    elif query.data == "back_to_editing":
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data.startswith(("Maths", "Management", "DigTools", "FinAcc", "Microeconomics")):
        context.user_data["task_data"]["subject"] = query.data
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data.startswith(("Test", "HW", "MidTerm", "FinalTest")):
        context.user_data["task_data"]["task_type"] = query.data
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data.startswith("points_"):
        points_value = query.data[7:]
        context.user_data["task_data"]["max_points"] = points_value
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif len(query.data.split('.')) == 2 and query.data.count('.') == 1:
        context.user_data["task_data"]["date"] = query.data
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data.startswith("time_"):
        time_value = query.data[5:]
        if time_value == "schedule":
            time_value = "23:59"
        context.user_data["task_data"]["time"] = time_value
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data in ["Online", "Offline - MD"]:
        context.user_data["task_data"]["format"] = query.data
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data in ["Open-book", "Closed-book"]:
        context.user_data["task_data"]["book_type"] = query.data
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data.startswith("details_"):
        details_value = query.data[8:]
        context.user_data["task_data"]["details"] = details_value
        message = await format_task_message(context)
        await query.edit_message_text(
            message,
            reply_markup=generate_edit_task_keyboard(user_lang),
            parse_mode='HTML'
        )
    elif query.data == "other_subject":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:" if user_lang == "ru" else "‚úçÔ∏è Enter subject name:")
        context.user_data["waiting_for"] = "subject"
        return WAITING_FOR_INPUT
    elif query.data == "other_task_type":
        await query.edit_message_text("üìò –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:" if user_lang == "ru" else "üìò Enter task type:")
        context.user_data["waiting_for"] = "task_type"
        return WAITING_FOR_INPUT
    elif query.data == "other_max_points":
        await query.edit_message_text("üíØ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:" if user_lang == "ru" else "üíØ Enter points:")
        context.user_data["waiting_for"] = "max_points"
        return WAITING_FOR_INPUT
    elif query.data == "custom_date":
        await query.edit_message_text("üóìÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.12):" if user_lang == "ru" else "üóìÔ∏è Enter date in DD.MM format (e.g., 15.12):")
        context.user_data["waiting_for"] = "date"
        return WAITING_FOR_INPUT
    elif query.data == "other_details":
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ (—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã):" if user_lang == "ru" else "üìù Enter details (allowed materials):")
        context.user_data["waiting_for"] = "details"
        return WAITING_FOR_INPUT
    elif query.data == "save_task":
        task_data = context.user_data.get("task_data", {})
        required_fields = ["subject", "task_type", "max_points", "date", "time", "format", "book_type", "details"]
        missing_fields = [field for field in required_fields 
                        if task_data.get(field) in ["–Ω–µ –≤—ã–±—Ä–∞–Ω–æ", "not selected", "–Ω–µ –≤—ã–±—Ä–∞–Ω–∞", "–Ω–µ –≤—ã–±—Ä–∞–Ω", "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"]]
        
        if missing_fields:
            await query.answer(
                "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º!" if user_lang == "ru" else "‚ö†Ô∏è Fill all fields before saving!",
                show_alert=True)
            return EDITING_TASK
        
        group = task_data["group"]
        sheet = sheets[group]
        
        try:
            row_data = [
                task_data["subject"],
                task_data["task_type"],
                task_data["format"],
                task_data["max_points"],
                task_data["date"],
                task_data["time"],
                group,
                task_data["book_type"],
                task_data["details"]
            ]
            
            sheet.append_row(row_data)
            context.user_data.clear()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
            await refresh_reminders_for_group(context.application.job_queue, group)
            
            await query.edit_message_text(
                "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!" if user_lang == "ru" else "‚úÖ Task added successfully!",
                reply_markup=main_menu_keyboard(user_lang))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await query.edit_message_text(
                f"‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}" if user_lang == "ru" else f"‚õî Error saving: {str(e)}",
                reply_markup=main_menu_keyboard(user_lang))
        return ConversationHandler.END
    elif query.data == "cancel_task":
        context.user_data.clear()
        await query.edit_message_text(
            "üö´ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ." if user_lang == "ru" else "üö´ Task addition canceled.",
            reply_markup=main_menu_keyboard(user_lang))
        return ConversationHandler.END
    
    return EDITING_TASK

async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    waiting_for = context.user_data.get("waiting_for")
    user_lang = get_user_language(update.effective_user.id)
    
    if waiting_for == "subject":
        context.user_data["task_data"]["subject"] = user_input
    elif waiting_for == "task_type":
        context.user_data["task_data"]["task_type"] = user_input
    elif waiting_for == "max_points":
        context.user_data["task_data"]["max_points"] = user_input
    elif waiting_for == "date":
        try:
            day, month = user_input.split('.')
            if len(day) == 2 and len(month) == 2 and 1 <= int(month) <= 12 and 1 <= int(day) <= 31:
                context.user_data["task_data"]["date"] = user_input
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.12)" if user_lang == "ru" else 
                    "‚ö†Ô∏è Wrong date format. Enter date in DD.MM format (e.g., 15.12)")
                return WAITING_FOR_INPUT
        except:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.12)" if user_lang == "ru" else 
                "‚ö†Ô∏è Wrong date format. Enter date in DD.MM format (e.g., 15.12)")
            return WAITING_FOR_INPUT
    elif waiting_for == "details":
        context.user_data["task_data"]["details"] = user_input
    
    del context.user_data["waiting_for"]
    
    message = await format_task_message(context)
    await update.message.reply_text(
        message,
        reply_markup=generate_edit_task_keyboard(user_lang),
        parse_mode='HTML'
    )
    return EDITING_TASK

async def callback_delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)

    if user_id not in ALLOWED_USERS:
        await query.edit_message_text(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π." if user_lang == "ru" else "‚õî You don't have access to delete tasks.",
            reply_markup=main_menu_keyboard(user_lang))
        return ConversationHandler.END

    group = ALLOWED_USERS[user_id]
    await show_tasks_for_group(query, group, show_delete_buttons=True)
    return EDITING_TASK

async def handle_task_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_lang = get_user_language(query.from_user.id)
    
    if query.data == "back_to_menu":
        await callback_back_to_menu(update, context)
        return ConversationHandler.END
    
    if query.data.startswith("delete_"):
        try:
            _, group, row_idx = query.data.split("_")
            row_idx = int(row_idx)
            sheet = sheets[group]
            
            all_values = sheet.get_all_values()
            if row_idx <= len(all_values):
                sheet.delete_rows(row_idx)
                await query.edit_message_text(
                    "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!" if user_lang == "ru" else "‚úÖ Task deleted successfully!",
                    reply_markup=main_menu_keyboard(user_lang))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
                await refresh_reminders_for_group(context.application.job_queue, group)
            else:
                await query.edit_message_text(
                    "‚õî –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ" if user_lang == "ru" else "‚õî Task was already deleted",
                    reply_markup=main_menu_keyboard(user_lang))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await query.edit_message_text(
                f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}" if user_lang == "ru" else f"‚õî Error deleting: {str(e)}",
                reply_markup=main_menu_keyboard(user_lang))
    
    return ConversationHandler.END

async def callback_reminder_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)
    
    try:
        reminders_enabled = get_user_reminders_enabled(user_id)
        
        keyboard = [
            [InlineKeyboardButton(
                "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –í–∫–ª" if reminders_enabled else "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –í—ã–∫–ª",
                callback_data="toggle_reminders")],
            [InlineKeyboardButton(
                "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to menu",
                callback_data="back_to_menu")]
        ]
        
        await query.edit_message_text(
            f"üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {REMINDER_TIME} –ø–æ –ú–°–ö –∑–∞:\n"
            f"10, 9, 8, ..., 1 –¥–µ–Ω—å –∏ –≤ –¥–µ–Ω—å –∑–∞–¥–∞–Ω–∏—è." if user_lang == "ru" else 
            f"üîî Reminder settings:\n\n"
            f"Reminders are sent daily at {REMINDER_TIME} MSK for:\n"
            f"10, 9, 8, ..., 1 days before and on the task day.",
            reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_reminder_settings: {e}")
        await query.edit_message_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫." if user_lang == "ru" else "‚õî Error getting settings.",
            reply_markup=main_menu_keyboard(user_lang))

async def toggle_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)
    
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((i for i, row in enumerate(users) if len(row) > 0 and str(user_id) == row[0]), None)
        
        if user_row is None:
            sheets["Users"].append_row([user_id, "", True, "ru", ""])
            new_state = True
        else:
            current_state = len(users[user_row]) > 2 and users[user_row][2].lower() == 'true'
            new_state = not current_state
            sheets["Users"].update_cell(user_row + 1, 3, str(new_state))
        
        await schedule_reminders_for_user(context.application.job_queue, user_id)
        
        await query.edit_message_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {'–≤–∫–ª—é—á–µ–Ω—ã' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}!" if user_lang == "ru" else f"‚úÖ Reminders {'enabled' if new_state else 'disabled'}!",
            reply_markup=main_menu_keyboard(user_lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ toggle_reminders: {e}")
        await query.edit_message_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫." if user_lang == "ru" else "‚õî Error changing settings.",
            reply_markup=main_menu_keyboard(user_lang))

async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)
    
    try:
        test_data = {
            'subject': "Test Subject",
            'task_type': "Test Task",
            'date': datetime.now(MOSCOW_TZ).strftime("%d.%m"),
            'time': "10:00",
            'days_left': 1,
            'max_points': "10",
            'format': "Online",
            'book_type': "Open-book",
            'details': "Calculators allowed"
        }
        
        context.job_queue.run_once(
            send_daily_reminder,
            5,
            chat_id=user_id,
            data={'tasks': [test_data]},
            name=f"test_reminder_{user_id}"
        )
        
        await query.edit_message_text(
            "üîî –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥!" if user_lang == "ru" else "üîî Test reminder will be sent in 5 seconds!",
            reply_markup=main_menu_keyboard(user_lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ test_reminder: {e}")
        await query.edit_message_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è." if user_lang == "ru" else "‚õî Error sending test reminder.",
            reply_markup=main_menu_keyboard(user_lang))

async def schedule_reminders_for_user(job_queue: JobQueue, user_id: int):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"=== –ù–∞—á–∞–ª–æ schedule_reminders_for_user –¥–ª—è {user_id} ===")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        removed = 0
        for job in job_queue.jobs():
            if job.name and str(user_id) in job.name and not job.name.startswith("test_"):
                job.schedule_removal()
                removed += 1
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {removed}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not get_user_reminders_enabled(user_id):
            logger.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = sheets["Users"].get_all_values()
        user_row = next((row for row in users if len(row) > 0 and str(user_id) == row[0]), None)
        group = user_row[1] if user_row and len(user_row) > 1 and user_row[1] in sheets else None
        
        if not group:
            logger.warning(f"–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        logger.info(f"–ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {group}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
        sheet = sheets[group]
        all_values = sheet.get_all_values()
        data = all_values[1:] if len(all_values) > 1 else []
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(data)}")

        now = datetime.now(MOSCOW_TZ)
        today = now.date()
        tasks_for_reminder = []
        
        for row in data:
            if len(row) >= 7 and row[6] == group:
                try:
                    deadline = convert_to_datetime(row[5], row[4])
                    if not deadline:
                        continue
                        
                    days_left = (deadline.date() - today).days
                    if 0 <= days_left <= 10:
                        tasks_for_reminder.append({
                            'subject': row[0],
                            'task_type': row[1],
                            'date': row[4],
                            'time': row[5],
                            'days_left': days_left,
                            'max_points': row[3],
                            'format': row[2],
                            'book_type': row[7] if len(row) > 7 else 'N/A',
                            'details': row[8] if len(row) > 8 else 'N/A'
                        })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row}: {e}")

        logger.info(f"–ó–∞–¥–∞–Ω–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(tasks_for_reminder)}")
        
        if tasks_for_reminder:
            tasks_for_reminder.sort(key=lambda x: x['days_left'])
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            reminder_time = datetime.strptime(REMINDER_TIME, "%H:%M").time()
            next_reminder = datetime.combine(datetime.now().date(), reminder_time)
            
            if datetime.now().time() > reminder_time:
                next_reminder += timedelta(days=1)
            
            next_reminder = MOSCOW_TZ.localize(next_reminder)
            logger.info(f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {next_reminder}")
            
            job_queue.run_repeating(
                send_daily_reminder_callback,
                interval=timedelta(days=1),
                first=next_reminder,
                chat_id=user_id,
                data={'tasks': tasks_for_reminder},
                name=f"daily_reminder_{user_id}"
            )

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ schedule_reminders_for_user: {e}")

async def send_daily_reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–ª–±—ç–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await send_daily_reminder(context, context.job.chat_id, context.job.data['tasks'])

async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int, tasks: list):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    user_lang = get_user_language(user_id)
    
    if not tasks:
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    tasks_by_days = {}
    for task in tasks:
        if task['days_left'] not in tasks_by_days:
            tasks_by_days[task['days_left']] = []
        tasks_by_days[task['days_left']].append(task)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    sorted_days = sorted(tasks_by_days.keys())
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = "üîî *–ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –û –ó–ê–î–ê–ù–ò–Ø–•*\n\n" if user_lang == "ru" else "üîî *DAILY TASKS REMINDER*\n\n"
    
    for days_left in sorted_days:
        if days_left == 0:
            day_header = "*–°–ï–ì–û–î–ù–Ø*" if user_lang == "ru" else "*TODAY*"
        elif days_left == 1:
            day_header = "*–ó–ê–í–¢–†–ê*" if user_lang == "ru" else "*TOMORROW*"
        else:
            day_header = f"*–ß–ï–†–ï–ó {days_left} –î–ù–ï–ô*" if user_lang == "ru" else f"*IN {days_left} DAYS*"
        
        message += f"{day_header}\n"
        
        for task in tasks_by_days[days_left]:
            time_display = "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é" if task['time'] in ["23:59", "By schedule", "–ü–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"] else task['time']
            message += (
                f"üìå *{task['subject']}* ‚Äî {task['task_type']}\n"
                f"üóì {task['date']} | ‚è∞ {time_display} | üè∑ {task['format']} | üíØ {task['max_points']}\n"
                f"üìñ –¢–∏–ø: {task['book_type']} | –î–µ—Ç–∞–ª–∏: {task['details']}\n\n" if user_lang == "ru" else
                f"üìå *{task['subject']}* ‚Äî {task['task_type']}\n"
                f"üóì {task['date']} | ‚è∞ {time_display} | üè∑ {task['format']} | üíØ {task['max_points']}\n"
                f"üìñ Type: {task['book_type']} | Details: {task['details']}\n\n"
            )
    
    try:
        if context:
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
        else:
            from telegram import Bot
            bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )
        logger.info(f"Sent daily reminder to user {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def refresh_reminders_for_group(job_queue: JobQueue, group: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã"""
    try:
        users = sheets["Users"].get_all_values()
        for row in users[1:]:
            if len(row) > 1 and row[1] == group and len(row) > 2 and row[2].lower() == 'true':
                user_id = int(row[0])
                await schedule_reminders_for_user(job_queue, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ refresh_reminders_for_group: {e}")

async def check_reminders_now(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    try:
        users = sheets["Users"].get_all_values()
        for row in users[1:]:
            if len(row) > 2 and row[2].lower() == 'true':
                user_id = int(row[0])
                await schedule_reminders_for_user(context.job_queue, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_reminders_now: {e}")

async def callback_language_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_lang = get_user_language(user_id)
    
    keyboard = [
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" if user_lang == "ru" else "‚Ü©Ô∏è Back to menu", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if user_lang == "ru" else "üåê Select language:",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def set_user_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    lang = query.data.replace("set_lang_", "")
    
    try:
        users = sheets["Users"].get_all_values()
        user_row = next((i for i, row in enumerate(users) if len(row) > 0 and str(user_id) == row[0]), None)
        
        if user_row is None:
            sheets["Users"].append_row([user_id, "", False, lang, ""])
        else:
            if len(users[user_row]) < 4:
                sheets["Users"].update_cell(user_row + 1, 4, lang)
            else:
                sheets["Users"].update_cell(user_row + 1, 4, lang)
        
        new_lang = get_user_language(user_id)
        
        await query.edit_message_text(
            "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!" if new_lang == "ru" else "‚úÖ Language changed to English!",
            reply_markup=main_menu_keyboard(new_lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        current_lang = get_user_language(user_id)
        await query.edit_message_text(
            "‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞." if current_lang == "ru" else "‚õî Error changing language.",
            reply_markup=main_menu_keyboard(current_lang))

def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(callback_get_data, pattern="get_data"))
    application.add_handler(CallbackQueryHandler(callback_help, pattern="help"))
    application.add_handler(CallbackQueryHandler(callback_back_to_menu, pattern="back_to_menu"))
    application.add_handler(CallbackQueryHandler(callback_reminder_settings, pattern="reminder_settings"))
    application.add_handler(CallbackQueryHandler(toggle_reminders, pattern="toggle_reminders"))
    application.add_handler(CallbackQueryHandler(test_reminder, pattern="test_reminder"))
    application.add_handler(CallbackQueryHandler(callback_select_group, pattern="select_group"))
    application.add_handler(CallbackQueryHandler(set_user_group, pattern="^set_group_B-11$|^set_group_B-12$"))
    application.add_handler(CallbackQueryHandler(callback_language_settings, pattern="language_settings"))
    application.add_handler(CallbackQueryHandler(set_user_language, pattern="^set_lang_ru$|^set_lang_en$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    add_task_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_add_task, pattern="add_task")],
        states={
            EDITING_TASK: [CallbackQueryHandler(edit_task_parameter)],
            WAITING_FOR_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input)],
        },
        fallbacks=[CommandHandler("cancel", callback_back_to_menu)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    delete_task_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_delete_task, pattern="delete_task")],
        states={
            EDITING_TASK: [CallbackQueryHandler(handle_task_deletion)]
        },
        fallbacks=[CommandHandler("cancel", callback_back_to_menu)],
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–¥–±—ç–∫–∞
    feedback_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(callback_leave_feedback, pattern="leave_feedback")],
        states={
            WAITING_FOR_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_feedback_input),
                                  CallbackQueryHandler(cancel_feedback, pattern="cancel_feedback")]
        },
        fallbacks=[CommandHandler("cancel", callback_back_to_menu)],
    )

    application.add_handler(add_task_handler)
    application.add_handler(delete_task_handler)
    application.add_handler(feedback_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue = application.job_queue
    if job_queue:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        job_queue.run_once(check_reminders_now, when=0)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 09:00 –ø–æ –ú–°–ö
        reminder_time = datetime.strptime(REMINDER_TIME, "%H:%M").time()
        next_reminder = datetime.combine(datetime.now().date(), reminder_time)
        
        if datetime.now().time() > reminder_time:
            next_reminder += timedelta(days=1)
        
        next_reminder = MOSCOW_TZ.localize(next_reminder)
        
        job_queue.run_repeating(
            check_reminders_now,
            interval=timedelta(days=1),
            first=next_reminder,
            name="daily_reminder_check"
        )
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
